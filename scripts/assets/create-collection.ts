#!/usr/bin/env tsx

import { Command } from 'commander';
import { PublicKey, Keypair, SystemProgram, Transaction } from '@solana/web3.js';
import { 
  createConnection, 
  getCurrentNetworkConfig,
  getExplorerUrl 
} from '../../lib/connection.js';
import { loadKeypair } from '../../lib/keypair.js';
import { 
  METADATA_CONFIG,
  TRANSACTION_CONFIG 
} from '../../lib/constants.js';
import { uploadMetadataToArweave } from '../../lib/arweave-placeholder.js';

const program = new Command();

program
  .name('create-collection')
  .description('Criar cole√ß√£o Core para ativos de pesquisa')
  .option('-n, --name <name>', 'Nome da cole√ß√£o', METADATA_CONFIG.COLLECTION_NAME)
  .option('-s, --symbol <symbol>', 'S√≠mbolo da cole√ß√£o', METADATA_CONFIG.COLLECTION_SYMBOL)
  .option('-d, --description <description>', 'Descri√ß√£o da cole√ß√£o', METADATA_CONFIG.COLLECTION_DESCRIPTION)
  .option('-i, --image-uri <uri>', 'URI da imagem da cole√ß√£o', METADATA_CONFIG.COLLECTION_IMAGE_URI)
  .option('-u, --update-authority <pubkey>', 'Autoridade de update (padr√£o: wallet atual)')
  .option('--dry-run', 'Apenas simular, n√£o executar transa√ß√£o')
  .action(async (options) => {
    try {
      console.log('üöÄ Iniciando cria√ß√£o da cole√ß√£o...');
      console.log('üìã Configura√ß√£o:');
      console.log(`   Nome: ${options.name}`);
      console.log(`   S√≠mbolo: ${options.symbol}`);
      console.log(`   Descri√ß√£o: ${options.description}`);
      console.log(`   Imagem: ${options.imageUri}`);
      
      // Configurar conex√£o
      const connection = createConnection();
      const networkConfig = getCurrentNetworkConfig();
      const keypair = loadKeypair();
      
      console.log(`üåê Rede: ${networkConfig.name}`);
      console.log(`üë§ Autoridade: ${keypair.publicKey.toString()}`);
      
      // Verificar saldo
      const balance = await connection.getBalance(keypair.publicKey);
      const balanceSOL = balance / 1e9;
      console.log(`üí∞ Saldo: ${balanceSOL.toFixed(4)} SOL`);
      
      if (balanceSOL < 0.1) {
        console.warn('‚ö†Ô∏è  Saldo baixo! Recomendado pelo menos 0.1 SOL para opera√ß√µes.');
      }
      
      // Criar metadata da cole√ß√£o
      const collectionMetadata = {
        name: options.name,
        symbol: options.symbol,
        description: options.description,
        image: options.imageUri,
        external_url: 'https://github.com/surgpass/research-assets',
        attributes: [
          {
            trait_type: 'Collection Type',
            value: 'Research Assets'
          },
          {
            trait_type: 'Protocol',
            value: 'SurgPass'
          }
        ],
        properties: {
          files: [
            {
              uri: options.imageUri,
              type: 'image/png'
            }
          ],
          category: 'image',
          creators: [
            {
              address: keypair.publicKey.toString(),
              share: 100,
              verified: true
            }
          ]
        }
      };
      
      console.log('üì§ Uploading metadata para Arweave...');
      const metadataResult = await uploadMetadataToArweave(collectionMetadata);
      console.log(`‚úÖ Metadata URI: ${metadataResult.url}`);
      
      if (options.dryRun) {
        console.log('üîç [DRY RUN] Transa√ß√£o n√£o executada');
        console.log(`üìÑ Metadata seria criada em: ${metadataResult.url}`);
        return;
      }
      
      // Criar cole√ß√£o (usando System Program para criar conta)
      console.log('üé® Criando cole√ß√£o...');
      const collectionKeypair = Keypair.generate();
      const collectionAddress = collectionKeypair.publicKey;
      
      // Criar uma conta simples como placeholder da cole√ß√£o
      const lamports = await connection.getMinimumBalanceForRentExemption(0);
      
      const transaction = new Transaction().add(
        SystemProgram.createAccount({
          fromPubkey: keypair.publicKey,
          newAccountPubkey: collectionAddress,
          lamports,
          space: 0,
          programId: SystemProgram.programId,
        })
      );
      
      // Enviar transa√ß√£o
      console.log('üì§ Enviando transa√ß√£o...');
      const signature = await connection.sendTransaction(transaction, [keypair, collectionKeypair], {
        skipPreflight: false,
        preflightCommitment: 'confirmed',
      });
      
      console.log('‚è≥ Aguardando confirma√ß√£o...');
      await connection.confirmTransaction(signature, 'confirmed');
      
      console.log('‚úÖ Cole√ß√£o criada com sucesso!');
      console.log(`üéØ Endere√ßo da Cole√ß√£o: ${collectionAddress.toString()}`);
      console.log(`üìù Signature: ${signature}`);
      console.log(`üîç Explorer: ${getExplorerUrl(signature)}`);
      
      // Salvar informa√ß√µes da cole√ß√£o
      const collectionInfo = {
        address: collectionAddress.toString(),
        name: options.name,
        symbol: options.symbol,
        metadataUri: metadataResult.url,
        updateAuthority: keypair.publicKey.toString(),
        signature,
        createdAt: new Date().toISOString(),
        network: networkConfig.name
      };
      
      console.log('\nüìã Informa√ß√µes da Cole√ß√£o:');
      console.log(JSON.stringify(collectionInfo, null, 2));
      
      console.log('\nüéâ Cole√ß√£o criada com sucesso!');
      console.log('üí° Pr√≥ximos passos:');
      console.log('   1. Use este endere√ßo da cole√ß√£o para mintar assets');
      console.log('   2. Configure royalties nos assets individuais');
      console.log('   3. Verifique a cole√ß√£o no Solana Explorer');
      
    } catch (error) {
      console.error('‚ùå Erro ao criar cole√ß√£o:', error);
      process.exit(1);
    }
  });

program.parse();
