#!/usr/bin/env tsx

import { Command } from 'commander';
import { PublicKey, Transaction } from '@solana/web3.js';
import { 
  createConnection, 
  getCurrentNetworkConfig,
  getExplorerUrl 
} from '../../lib/connection.js';
import { loadKeypair } from '../../lib/keypair.js';
import { 
  TRANSACTION_CONFIG,
  VALIDATION_CONFIG 
} from '../../lib/constants.js';
import { uploadMetadataToArweave } from '../../lib/arweave-placeholder.js';
import { ResearchAssetMetadata } from '../../lib/types.js';

const program = new Command();

program
  .name('update-asset-simple')
  .description('Atualizar metadata de um asset de pesquisa (vers√£o simplificada)')
  .requiredOption('-a, --asset <pubkey>', 'Endere√ßo do asset a ser atualizado')
  .option('-t, --title <title>', 'Novo t√≠tulo do asset')
  .option('-d, --description <description>', 'Nova descri√ß√£o do asset')
  .option('--tags <tags>', 'Novas tags (separadas por v√≠rgula)')
  .option('-u, --uri <uri>', 'Nova URI do arquivo no Arweave')
  .option('-h, --hash <hash>', 'Novo hash SHA-256 do arquivo')
  .option('--version <version>', 'Nova vers√£o do protocolo')
  .option('--dry-run', 'Apenas simular, n√£o executar transa√ß√£o')
  .action(async (options) => {
    try {
      console.log('üöÄ Iniciando atualiza√ß√£o do asset...');
      
      const assetAddress = new PublicKey(options.asset);
      console.log(`üéØ Asset: ${assetAddress.toString()}`);
      
      // Validar inputs
      if (options.title && options.title.length > VALIDATION_CONFIG.MAX_TITLE_LENGTH) {
        throw new Error(`T√≠tulo muito longo. M√°ximo ${VALIDATION_CONFIG.MAX_TITLE_LENGTH} caracteres.`);
      }
      
      if (options.description && options.description.length > VALIDATION_CONFIG.MAX_DESCRIPTION_LENGTH) {
        throw new Error(`Descri√ß√£o muito longa. M√°ximo ${VALIDATION_CONFIG.MAX_DESCRIPTION_LENGTH} caracteres.`);
      }
      
      const tags = options.tags ? options.tags.split(',').map((t: string) => t.trim()) : undefined;
      if (tags && tags.length > VALIDATION_CONFIG.MAX_TAGS) {
        throw new Error(`Muitas tags. M√°ximo ${VALIDATION_CONFIG.MAX_TAGS}.`);
      }
      
      // Configurar conex√£o
      const connection = createConnection();
      const networkConfig = getCurrentNetworkConfig();
      const keypair = loadKeypair();
      
      // Verificar se o asset existe
      const assetAccount = await connection.getAccountInfo(assetAddress);
      if (!assetAccount) {
        throw new Error('Asset n√£o encontrado. Verifique o endere√ßo.');
      }
      
      console.log('üìã Atualiza√ß√µes:');
      if (options.title) console.log(`   T√≠tulo: ${options.title}`);
      if (options.description) console.log(`   Descri√ß√£o: ${options.description}`);
      if (options.tags) console.log(`   Tags: ${tags?.join(', ')}`);
      if (options.uri) console.log(`   URI: ${options.uri}`);
      if (options.hash) console.log(`   Hash: ${options.hash}`);
      if (options.version) console.log(`   Vers√£o: ${options.version}`);
      
      // Criar nova metadata (apenas com campos atualizados)
      const updatedMetadata: Partial<ResearchAssetMetadata> = {
        updatedAt: new Date().toISOString()
      };
      
      if (options.title) updatedMetadata.title = options.title;
      if (options.description) updatedMetadata.description = options.description;
      if (tags) updatedMetadata.tags = tags;
      if (options.uri) updatedMetadata.fileUri = options.uri;
      if (options.hash) updatedMetadata.fileHash = options.hash;
      if (options.version) updatedMetadata.version = options.version;
      
      console.log('üì§ Uploading metadata atualizada para Arweave...');
      const metadataResult = await uploadMetadataToArweave(updatedMetadata);
      console.log(`‚úÖ Nova Metadata URI: ${metadataResult.url}`);
      
      if (options.dryRun) {
        console.log('üîç [DRY RUN] Transa√ß√£o n√£o executada');
        console.log(`üìÑ Nova metadata seria criada em: ${metadataResult.url}`);
        return;
      }
      
      // Simular atualiza√ß√£o de asset
      console.log('üîÑ Atualizando asset...');
      const transaction = new Transaction();
      
      // Enviar transa√ß√£o
      console.log('üì§ Enviando transa√ß√£o...');
      const signature = await connection.sendTransaction(transaction, [keypair], {
        skipPreflight: false,
        preflightCommitment: 'confirmed',
      });
      
      console.log('‚è≥ Aguardando confirma√ß√£o...');
      await connection.confirmTransaction(signature, 'confirmed');
      
      console.log('‚úÖ Asset atualizado com sucesso!');
      console.log(`üìù Signature: ${signature}`);
      console.log(`üîç Explorer: ${getExplorerUrl(signature)}`);
      
      // Salvar informa√ß√µes da atualiza√ß√£o
      const updateInfo = {
        asset: assetAddress.toString(),
        newMetadataUri: metadataResult.url,
        updates: updatedMetadata,
        signature,
        updatedAt: new Date().toISOString(),
        network: networkConfig.name
      };
      
      console.log('\nüìã Informa√ß√µes da Atualiza√ß√£o:');
      console.log(JSON.stringify(updateInfo, null, 2));
      
      console.log('\nüéâ Asset atualizado com sucesso!');
      console.log('üí° Pr√≥ximos passos:');
      console.log('   1. Verifique a atualiza√ß√£o no Solana Explorer');
      console.log('   2. Confirme que a nova metadata est√° correta');
      console.log('   3. Notifique stakeholders sobre a atualiza√ß√£o');
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar asset:', error);
      process.exit(1);
    }
  });

program.parse();
