#!/usr/bin/env tsx

import { Command } from 'commander';
import { PublicKey, SystemProgram, LAMPORTS_PER_SOL, Keypair } from '@solana/web3.js';
import { 
  createConnection, 
  getCurrentNetworkConfig,
  getExplorerUrl,
  accountExists,
  getAccountBalance 
} from '../../lib/connection.js';
import { loadKeypair } from '../../lib/keypair.js';
import { 
  TREASURY_CONFIG,
  TRANSACTION_CONFIG 
} from '../../lib/constants.js';
import { deriveTreasuryVaultPDA } from '../../lib/pda.js';

const program = new Command();

program
  .name('init-vault')
  .description('Inicializar PDA do cofre de recompensas')
  .option('-a, --authority <pubkey>', 'Autoridade do cofre (padr√£o: wallet atual)')
  .option('-s, --seed <seed>', 'Seed customizado para o PDA', TREASURY_CONFIG.VAULT_SEED)
  .option('--initial-sol <amount>', 'Quantidade inicial de SOL para depositar', '0')
  .option('--dry-run', 'Apenas simular, n√£o executar transa√ß√£o')
  .action(async (options) => {
    try {
      console.log('üöÄ Iniciando inicializa√ß√£o do cofre de recompensas...');
      
      // Configurar conex√£o
      const connection = createConnection();
      const networkConfig = getCurrentNetworkConfig();
      const keypair = loadKeypair();
      
      const authority = options.authority ? new PublicKey(options.authority) : keypair.publicKey;
      const initialSOL = parseFloat(options.initialSol);
      
      console.log('üìã Configura√ß√£o:');
      console.log(`   Autoridade: ${authority.toString()}`);
      console.log(`   Seed: ${options.seed}`);
      console.log(`   SOL inicial: ${initialSOL}`);
      
      // Criar keypair para o cofre (ao inv√©s de usar PDA)
      // NOTA: Em produ√ß√£o, use PDA com um program customizado
      const vaultKeypair = Keypair.generate();
      const vaultAddress = vaultKeypair.publicKey;
      
      console.log(`üéØ Endere√ßo do Cofre: ${vaultAddress.toString()}`);
      console.log(`‚ö†Ô∏è  NOTA: Usando keypair regular. Em produ√ß√£o, use PDA com program.`);
      
      // Verificar se o cofre j√° existe
      const vaultExists = await accountExists(connection, vaultAddress);
      if (vaultExists) {
        console.log('‚úÖ Cofre j√° existe!');
        const balance = await getAccountBalance(connection, vaultAddress);
        console.log(`üí∞ Saldo atual: ${balance.toFixed(4)} SOL`);
        
        if (initialSOL > 0) {
          console.log('üí∏ Depositando SOL adicional...');
        } else {
          console.log('‚ÑπÔ∏è  Nenhuma a√ß√£o necess√°ria');
          return;
        }
      }
      
      // Verificar saldo da autoridade
      const authorityBalance = await getAccountBalance(connection, authority);
      console.log(`üí∞ Saldo da autoridade: ${authorityBalance.toFixed(4)} SOL`);
      
      const totalNeeded = initialSOL + 0.001; // + rent exempt
      
      if (options.dryRun) {
        console.log('üîç [DRY RUN] Transa√ß√£o n√£o executada');
        console.log(`üéØ Cofre seria criado em: ${vaultAddress.toString()}`);
        console.log(`üí∞ SOL inicial seria: ${initialSOL}`);
        return;
      }
      
      if (authorityBalance < totalNeeded) {
        throw new Error(`Saldo insuficiente. Necess√°rio: ${totalNeeded} SOL, Dispon√≠vel: ${authorityBalance} SOL`);
      }
      
      // Criar transa√ß√£o
      const transaction = new (await import('@solana/web3.js')).Transaction();
      
      // 1. Criar conta do cofre com SOL inicial
      console.log('üìù Criando conta do cofre...');
      const rentExempt = await connection.getMinimumBalanceForRentExemption(0);
      const totalLamports = rentExempt + Math.floor(initialSOL * LAMPORTS_PER_SOL);
      
      const createAccountInstruction = SystemProgram.createAccount({
        fromPubkey: authority,
        newAccountPubkey: vaultAddress,
        space: 0, // Conta simples, sem dados
        lamports: totalLamports,
        programId: SystemProgram.programId,
      });
      transaction.add(createAccountInstruction);
      
      // Enviar transa√ß√£o
      console.log('üì§ Enviando transa√ß√£o...');
      const signature = await connection.sendTransaction(transaction, [keypair, vaultKeypair], {
        skipPreflight: false,
        preflightCommitment: 'confirmed',
      });
      
      console.log('‚è≥ Aguardando confirma√ß√£o...');
      await connection.confirmTransaction(signature, 'confirmed');
      
      console.log('‚úÖ Cofre inicializado com sucesso!');
      console.log(`üéØ Endere√ßo do Cofre: ${vaultAddress.toString()}`);
      console.log(`üìù Signature: ${signature}`);
      console.log(`üîç Explorer: ${getExplorerUrl(signature)}`);
      
      // Verificar saldo final
      const finalBalance = await getAccountBalance(connection, vaultAddress);
      console.log(`üí∞ Saldo final: ${finalBalance.toFixed(4)} SOL`);
      
      // Salvar informa√ß√µes do cofre
      const vaultInfo = {
        address: vaultAddress.toString(),
        authority: authority.toString(),
        initialSOL,
        currentBalance: finalBalance,
        signature,
        createdAt: new Date().toISOString(),
        network: networkConfig.name,
        note: 'Cofre criado com keypair regular. Para produ√ß√£o, implemente program com PDA.'
      };
      
      console.log('\nüìã Informa√ß√µes do Cofre:');
      console.log(JSON.stringify(vaultInfo, null, 2));
      
      console.log('\nüéâ Cofre inicializado com sucesso!');
      console.log('üí° Pr√≥ximos passos:');
      console.log('   1. Depositar LSTs no cofre');
      console.log('   2. Configurar distribui√ß√£o de recompensas');
      console.log('   3. Verificar o cofre no Solana Explorer');
      console.log('   4. Implementar l√≥gica de governance');
      
    } catch (error) {
      console.error('‚ùå Erro ao inicializar cofre:', error);
      process.exit(1);
    }
  });

program.parse();
